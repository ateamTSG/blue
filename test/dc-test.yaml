apiVersion: v1
kind: Service
metadata:
  name: mongodb
  creationTimestamp: null
    labels:
      app: mongodb
spec:
  ports:
  - name: mongo
    port: 27017
    protocol: TCP
    targetPort: 27017
  selector:
      name: mongodb
  type: ClusterIP
    sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: rocketchat
  creationTimestamp: 
    labels:
      app: rocketchat
spec:
  ports:
  - name: 3000-tcp
    protocol: TCP
    port: 3000
    targetPort: 3000
  selector:
    app: rocketchat
    deploymentconfig: rocketchat
  type: ClusterIP
  sessionAffinity: None
---
kind: DeploymentConfig
metadata:
  name: mongodb-dc
  labels:
    app: mongodb
spec:
  strategy:
    type: Recreate
    recreateParams:
      timeoutSeconds: 600
  replicas: 1
  test: false
  selector:
    name: mongodb-dc
    spec:
      containers:
      - image: mongo:4.0
        name: mongodb
        ports:
        - containerPort: 27017
            protocol: TCP
        env:
          - name: MONGODB_USER
            value: "${MONGODB_USER}"
          - name: MONGODB_PASSWORD
            value: "${MONGODB_PASSWORD}"
          - name: MONGODB_DATABASE
            value: "${MONGODB_DATABASE}"
          - name: MONGODB_ADMIN_PASSWORD
            value: "${MONGODB_ADMIN_PASSWORD}"
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
          volumeMounts:
          - name: mongodb-data
            mountPath: "/var/lib/mongodb/data"
          livenessProbe:
            tcpSocket:
              port: 27017
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            initialDelaySeconds: 3
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities: {}
            privileged: false
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${DATABASE_SERVICE_NAME}"
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
  status: {}
---
kind: DeploymentConfig
metadata:
  name: rocket-dc
spec:
  selector:
    matchLabels:
      app: rocketchat
  strategy:
    type: Rolling
    rollingParams:
      updatePeriodSeconds: 1
      intervalSeconds: 1
      timeoutSeconds: 600
      maxUnavailable: 25%
      maxSurge: 25%
    resources: {}
    spec:
      containers:
        - name: rocketchat
          image: "rocketchat:0.48.1"
          ports:
          - containerPort: 3000
            protocol: TCP
          env:
          - name: MONGO_URL
            value: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}
          resources: {}
      volumeMounts:
        - mountPath: /glide/mysql/data
          name: local-pv
      volumes:
        - name: rocketchat-volume-1
          emptyDir: {}
        #### im here
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: local-pv
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 30G
  local:
    path: /mnt/data
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: db-label
          operator: In
          values:
          - "true"
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc1
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 30G
  storageClassName: standard

